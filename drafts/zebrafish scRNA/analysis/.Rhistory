}
}
dev.off()
}
rownames(chrom_counts)
rownames(chrom_counts) %>% data.frame
rownames(chrom_counts) %>% data.frame(name=.)
rownames(chrom_counts) %>% data.frame(name=.) %>% head
rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC", name))
rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE", name))
rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE|GL", name))
rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE|GL|JH", name))
rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE|GL|JH|\*", name))
rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE|GL|JH|\\*", name))
rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name))
{
pdf(file.path("~/Desktop/scATAC_species_plot_by_chrom.pdf"))
chr_use = rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name))
for( chrHS in chr_use[grep("HUMAN", chr_use)] ){
for( chrMM in chr_use[grep("HUMAN", chr_use)]  ){
plot( log10( chrom_counts[chrHS, ] + 1), log10( chrom_counts[chrMM, ] + 1) )
}
}
dev.off()
}
chr_use = rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name))
chr_use[grep("MOUSE", chr_use)]
[grep("MOUSE", chr_use)]
grep("MOUSE", chr_use)
grep("MOUSE", chr_use)
chr_use
chr_use = rownames(chrom_counts) %>% data.frame(name=.) %>% subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name), select = "NAME")
chr_use = rownames(chrom_counts) %>%
data.frame(name=.) %>%
subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name),
select = "name")
chr_use
{
pdf(file.path("~/Desktop/scATAC_species_plot_by_chrom.pdf"))
chr_use = rownames(chrom_counts) %>%
data.frame(name=.) %>%
subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name),
select = "name")
for( chrHS in chr_use[grep("HUMAN", chr_use)] ){
for( chrMM in chr_use[grep("MOUSE", chr_use)]  ){
plot( log10( chrom_counts[chrHS, ] + 1), log10( chrom_counts[chrMM, ] + 1) )
}
}
dev.off()
}
chr_use
{
pdf(file.path("~/Desktop/scATAC_species_plot_by_chrom.pdf"))
chr_use = rownames(chrom_counts) %>%
data.frame(name=.) %>%
subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name),
select = "name", drop = T)
for( chrHS in chr_use[grep("HUMAN", chr_use)] ){
for( chrMM in chr_use[grep("MOUSE", chr_use)]  ){
plot( log10( chrom_counts[chrHS, ] + 1), log10( chrom_counts[chrMM, ] + 1) )
}
}
dev.off()
}
{
pdf(file.path("~/Desktop/scATAC_species_plot_by_chrom.pdf"))
chr_use = rownames(chrom_counts) %>%
data.frame(name=.) %>%
subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name),
select = "name", drop = T)
for( chrHS in chr_use[grep("HUMAN", chr_use)] ){
for( chrMM in chr_use[grep("MOUSE", chr_use)]  ){
plot( log10( chrom_counts[chrHS, ] + 1), log10( chrom_counts[chrMM, ] + 1) )
xlab( chrHS )
ylab( chrMM )
}
}
dev.off()
}
plot( log10( chrom_counts[chrHS, ] + 1), log10( chrom_counts[chrMM, ] + 1) )
xlab( chrHS )
ylab( chrMM )
?xlab
{
pdf(file.path("~/Desktop/scATAC_species_plot_by_chrom.pdf"))
chr_use = rownames(chrom_counts) %>%
data.frame(name=.) %>%
subset(!grepl("ERCC|TRANSGENE|GL|JH|NC|\\*", name),
select = "name", drop = T)
for( chrHS in chr_use[grep("HUMAN", chr_use)] ){
for( chrMM in chr_use[grep("MOUSE", chr_use)]  ){
plot( log10( chrom_counts[chrHS, ] + 1),
log10( chrom_counts[chrMM, ] + 1),
xlab = chrHS,
ylab = chrMM )
}
}
dev.off()
}
hg19_prom = annotatr::build_annotations("hg19", "hg19_genes_promoters")
mm10_prom = annotatr::build_annotations("mm10", "mm10_genes_promoters")
mm10_prom
hg19_prom
peaks %>% head
peaks_granges = GenomicRangesList(peaks[1:3])
peaks_granges = GenomicRanges(peaks[1:3])
peaks_granges = granges(peaks[1:3])
?granges
peaks_granges = makeGRangesFromDataFrame(peaks[1:3])
peaks_granges = makeGRangesFromDataFrame( peaks, keep.extra.columns = T,
seqnames.field = 1, start.field = 2, end.field = 3 )
peaks_granges = makeGRangesFromDataFrame( peaks, keep.extra.columns = T,
seqnames.field = "V1", start.field = 2, end.field = 3 )
peaks_granges = makeGRangesFromDataFrame( peaks, keep.extra.columns = T,
seqnames.field = "V1", start.field = "V2", end.field = "V3" )
peaks_granges
hg19_prom$id %>% table
?renameSeqlevels
seqlevels(hg19_prom)
hg19_prom %<>% renameSeqlevels(seqlevels(hg19_prom) %>% gsub("chr", "HUMAN_", .))
mm10_prom %<>% renameSeqlevels(seqlevels(mm10_prom) %>% gsub("chr", "MOUSE_", .))
mm10_prom
rbind(mm10_prom, hg19_prom)
GenomicRanges::countOverlaps(peaks_granges, mm10_prom)
GenomicRanges::countOverlaps(peaks_granges, mm10_prom) %>% any
GenomicRanges::countOverlaps(peaks_granges, mm10_prom) %>% sum
?countOverlaps
peaks$is_near_promoter = GenomicRanges::countOverlaps(peaks_granges, mm10_prom) > 0
peaks_granges = makeGRangesFromDataFrame( peaks, keep.extra.columns = T,
seqnames.field = "V1", start.field = "V2", end.field = "V3" )
peaks$is_near_promoter =
GenomicRanges::countOverlaps(peaks_granges, mm10_prom) +
GenomicRanges::countOverlaps(peaks_granges, hg19_prom)
peaks$is_near_promoter %<>% is_greater_than(0)
table(peaks$is_near_promoter)
human_counts %<>% aggregate_nice(by = cell_without_lane, FUN = sum)
mouse_counts %<>% aggregate_nice(by = cell_without_lane, FUN = sum)
human_counts = colSums( scATAC[is_human, peaks$is_near_promoter] )
mouse_counts = colSums( scATAC[!is_human, peaks$is_near_promoter] )
human_counts = colSums( scATAC[is_human & peaks$is_near_promoter, ] )
mouse_counts = colSums( scATAC[!is_human & peaks$is_near_promoter, ] )
cell_without_lane = names(mouse_counts) %>% gsub("_L00.", "", .)
human_counts = colSums( scATAC[is_human & peaks$is_near_promoter, ] )
library(Matrix)
human_counts = colSums( scATAC[is_human & peaks$is_near_promoter, ] )
dim(scATAC[is_human & peaks$is_near_promoter, ] )
typeof(scATAC[is_human & peaks$is_near_promoter, ] )
human_counts = Matrix::colSums( scATAC[is_human & peaks$is_near_promoter, ] )
mouse_counts = Matrix::colSums( scATAC[!is_human & peaks$is_near_promoter, ] )
cell_without_lane = names(mouse_counts) %>% gsub("_L00.", "", .)
human_counts %<>% aggregate_nice(by = cell_without_lane, FUN = sum)
mouse_counts %<>% aggregate_nice(by = cell_without_lane, FUN = sum)
sizes$mouse_counts_near_promoter = mouse_counts
mouse_counts
sizes$mouse_counts_near_promoter = mouse_counts[-769,]
sizes$human_counts_near_promoter = human_counts[-769,]
p = ggplot(sizes, aes( y=log10(mouse_counts_near_promoter+1),
x = log10(human_counts_near_promoter+1),
colour = is_empty)) + geom_point()
p
ggsave("~/Desktop/scATAC_species_plot_only_peaks_near_promoter.pdf")
p = ggplot(sizes, aes( y=log10(mouse_counts_near_promoter+1),
x = log10(human_counts_near_promoter+1),
colour = is_empty)) + geom_point()
ggsave("~/Desktop/scATAC_species_plot_only_peaks_near_promoter.pdf")
peaks$is_near_promoter %>% table
28815 / 53714 + 28815
28815 / (53714 + 28815 )
(53714 + 28815 )
sizes$cross_species = sizes$has_human & sizes$has_mouse
sizes
sizes %>% head
sizes$plate_row = sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(1, 2, .)
sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(1, 2, .)
sizes$cell %>% gsub("Plate.*-", "", .)
sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(., 1, 2)
sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(., 1, 1)
sizes$plate_col = sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(., 2, 2)
sizes$plate_row = sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(., 1, 1)
sizes$plate_col = sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(., 2, 2)
sizes$cell %>%
sizes$cell %>% gsub("Plate.*-.", "", .)
sizes$cell %>% gsub("Plate.*-.", "", .) %>% gsub("_.*", "", .)
sizes$plate_col = sizes$cell %>% gsub("Plate.*-.", "", .) %>% gsub("_.*", "", .) %>% as.numeric
sizes$plate_row = sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(., 1, 1)
sizes$plate_col = sizes$cell %>% gsub("Plate.*-.", "", .) %>% gsub("_.*", "", .) %>% as.numeric
sizes$cell %>% gsub("Plate", "", .) %>% gsub("-.*", "", .) %>% as.numeric()
sizes$cross_species = sizes$has_human & sizes$has_mouse
sizes$plate_row = sizes$cell %>% gsub("Plate.*-", "", .) %>% substring(., 1, 1)
sizes$plate_col = sizes$cell %>% gsub("Plate.*-.", "", .) %>% gsub("_.*", "", .) %>% as.numeric
sizes$plate_idx = sizes$cell %>% gsub("Plate", "", .) %>% gsub("-.*", "", .) %>% as.numeric()
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_row, y = plate_col)) +
geom_tile(aes(colour = "cross_species"))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_row, y = plate_col)) +
geom_tile(aes(fill = cross_species))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_row, y = plate_col)) +
geom_tile(aes(fill = is_empty))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = cross_species))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = cross_species))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = cross_species))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty))
ggsave(file.path("~/Desktop/empty_well_distribution.pdf"))
ggplot(sizes %>% subset( plate_idx == 2),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty))
ggsave(file.path("~/Desktop/empty_well_distribution_plate1.pdf"))
ggplot(sizes %>% subset( plate_idx == 2),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty))
ggsave(file.path("~/Desktop/empty_well_distribution_plate2.pdf"))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty)) + scale_fill_manual(values = c("black", "grey"))
ggsave(file.path("~/Desktop/empty_well_distribution_plate1.pdf"))
ggplot(sizes %>% subset( plate_idx == 2),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty)) + scale_fill_manual(values = c("black", "grey"))
ggsave(file.path("~/Desktop/empty_well_distribution_plate2.pdf"))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty)) + scale_fill_manual(values = c("FALSE"="black", "TRUE"="grey"))
ggsave(file.path("~/Desktop/empty_well_distribution_plate1.pdf"))
ggplot(sizes %>% subset( plate_idx == 2),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = is_empty)) + scale_fill_manual(values = c("FALSE"="black", "TRUE"="grey"))
ggsave(file.path("~/Desktop/empty_well_distribution_plate2.pdf"))
ggplot(sizes %>% subset( plate_idx == 1),
aes(x = plate_col, y = plate_row)) +
geom_tile(aes(fill = cross_species))
# # Move to repo with code for this paper
# # set results path
# You may have to run this first line by copying it to the console, because knitr is
# never enthusiastic or predictable about changing the working directory.
proj_dir = path.expand("~/Desktop/scRNA_data_analysis/pharynx_analysis3")
knitr::opts_knit$set(root.dir = proj_dir)
setwd( proj_dir )
library(magrittr)
library(freezr)
library(Seurat)
library(thymusatlastools2)
#' This is specific to my folder layout.
#' When run without args, this function runs only thymus_functions.Rmd and saves to the "interactive" folder.
#' Otherwise, it runs both thymus_functions.Rmd and an analysis script, and it
#' names the results subfolder after the source code subfolder. This way, the same
#' organizational structure is used for the analysis scripts and the results folders.
#'
flash_freeze = configure_flash_freeze( project_directory = proj_dir,
setup_scripts = "setup.Rmd",
repos_to_track = c(proj_dir,
"~/Desktop/software_projects/thymusatlastools2",
"~/Desktop/software_projects/freezr") )
# # Move to repo with code for this paper
# # set results path
# You may have to run this first line by copying it to the console, because knitr is
# never enthusiastic or predictable about changing the working directory.
proj_dir = path.expand("~/Desktop/scRNA_data_analysis/pharynx_analysis3")
knitr::opts_knit$set(root.dir = proj_dir)
setwd( proj_dir )
library(magrittr)
library(freezr)
library(Seurat)
library(thymusatlastools2)
#' This is specific to my folder layout.
#' When run without args, this function runs only thymus_functions.Rmd and saves to the "interactive" folder.
#' Otherwise, it runs both thymus_functions.Rmd and an analysis script, and it
#' names the results subfolder after the source code subfolder. This way, the same
#' organizational structure is used for the analysis scripts and the results folders.
#'
flash_freeze = configure_flash_freeze( project_directory = proj_dir,
setup_scripts = "setup.Rmd",
repos_to_track = c(proj_dir,
"~/Desktop/software_projects/thymusatlastools2",
"~/Desktop/software_projects/freezr") )
flash_freeze()
library(magrittr)
setwd("~/Dropbox/blog posts/zebrafish scRNA/analysis/")
expr = read.csv("data/TracerSeq embryo1/GSM3067196_TracerSeq1_nm.csv.gz", header = T) %>% Matrix(sparse = T)
tol2 = read.csv("data/", header = T) %>% Matrix(sparse = T)
tol2 = read.csv("data/TracerSeq_CellTracerCounts/TracerSeq1_CellTracerCounts.csv", header = T) %>% Matrix(sparse = T)
tol2 = read.csv("data/TracerSeq_CellTracerCounts/TracerSeq1_CellTracerCounts.csv", header = T)
dim(tol2)
tol2
head(tol2)
tol2 = read.csv("data/TracerSeq_CellTracerCounts/TracerSeq1_CellTracerCounts.csv", header = F)
head(tol2)
dim(expr)
library("Matrix")
expr = read.csv("data/TracerSeq embryo1/GSM3067196_TracerSeq1_nm.csv.gz", header = T) %>% Matrix(sparse = T)
metadata = read.csv("data/TracerSeq embryo1/GSM3067196_TracerSeq1_clustID.txt.gz", header = F)
metadata = read.csv("data/TracerSeq embryo1/GSM3067196_TracerSeq1_clustID.txt.gz", header = F)
dim(metadata)
dim(tol2)
head(tol2)
colnames(tol2) = c("cell_bc", "clone_number", "clone_bc", "count")
head(metadata)
expr = read.csv("data/TracerSeq embryo1/GSM3067196_TracerSeq1_nm.csv.gz", header = T) %>% Matrix(sparse = T)
all_cell_barcodes = colnames(expr)
head(all_cell_barcodes)
length(all_cell_barcodes)
expr = read.csv("data/TracerSeq embryo1/GSM3067196_TracerSeq1_nm.csv.gz", header = T)
expr[1:4, 1:4]
all_cell_barcodes = colnames(expr)
head(all_cell_barcodes)
rownames(expr) = expr$Row
expr$Row = NULL
expr %<>% as.matrix %>% Matrix(sparse = T)
expr[1:4, 1L4]
expr[1:4, 1:4]
all(tol2$cell_bc %in% all_cell_barcodes)
any(tol2$cell_bc %in% all_cell_barcodes)
table(tol2$cell_bc %in% all_cell_barcodes)
tol2$cell_bc %in% all_cell_barcodes %>% plot
tol2$cell_bc %in% all_cell_barcodes %>% head
setdiff( tol2$cell_bc, all_cell_barcodes )
intersect( tol2$cell_bc, all_cell_barcodes )
all_cell_barcodes
head(tol2)
tol2$clone_bc %>% table %>% table
tol2$clone_bc %>% table %>% hist
tol2$clone_bc %>% barplot
tol2$clone_bc %>% table %>% sort %>% barplot
tol2$clone_bc %>% table %>% sort
tol2$clone_bc %>% table %>% table
tol2$clone_bc %>% table %>% table  %>% sort
tol2$clone_bc %>% table %>% table %>% sort
tol2$clone_bc %>% table
tol2$clone_bc %>% table %>% sort
tol2$clone_bc %>% table %>% table %>% sort
tol2$clone_bc %>% table %>% table %>% as.data.frame
tol2$clone_bc %>% table %>% table %>% as.data.frame %>% set_colnames(c("cell_count", "frequency")) %>% ggplot() + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
library("ggplot")
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency")) %>%
ggplot() + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
library("ggplot2")
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency")) %>%
ggplot() + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency")) %>%
subset( cell_count != 1 )
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency")) %>%
subset( cell_count != 1 ) %>%
ggplot() + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency")) %>%
subset( cell_count != 1 ) %>%
ggplot() + geom_bar(stat="identity", aes(x=as.numeric(cell_count), y=frequency))
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>% head
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency")) %>% head
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency")) %>% extract2(1) %>% plot
tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency")) %>% extract2(1) %>% head
tol2_cellcount_dist = tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency"))
tol2_cellcount_dist$cell_count %<>% as.character %>% as.numeric
subset( cell_count != 1 ) %>%
ggplot() + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
tol2_cellcount_dist = tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency"))
tol2_cellcount_dist$cell_count %<>% as.character %>% as.numeric
subset( cell_count != 1 ) %>%
ggplot() + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
tol2_cellcount_dist
tol2_cellcount_dist %>% head
subset( tol2_cellcount_dist, cell_count != 1 ) %>%
ggplot() + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
cell_tol2count_dist = tol2$cell_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency"))
cell_tol2count_dist = tol2$cell_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("tol2_count", "frequency"))
cell_tol2count_dist$tol2_count %<>% as.character %>% as.numeric
ggplot(cell_tol2count_dist) + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
l
cell_tol2count_dist = tol2$cell_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("tol2_count", "frequency"))
cell_tol2count_dist$tol2_count %<>% as.character %>% as.numeric
ggplot(cell_tol2count_dist) + geom_bar(stat="identity", aes(x=tol2_count, y=frequency))
cell_tol2count_dist
cell_tol2count_dist
cell_tol2count_dist = tol2$cell_bc %>% table
tol2$cell_bc %>% table
tol2$cell_bc %>% table %>% srot
tol2$cell_bc %>% table %>% sort
cell_tol2count_dist = tol2$cell_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("tol2_count", "frequency"))
cell_tol2count_dist$tol2_count %<>% as.character %>% as.numeric
ggplot(cell_tol2count_dist) + geom_bar(stat="identity", aes(x=tol2_count, y=frequency))
tol2_cellcount_dist = tol2$clone_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("cell_count", "frequency"))
tol2_cellcount_dist$cell_count %<>% as.character %>% as.numeric
subset( tol2_cellcount_dist, cell_count != 1 ) %>%
ggplot() + geom_bar(stat="identity", aes(x=cell_count, y=frequency))
tol2_cellcount_dist$cell_count
tol2_cellcount_dist
tol2_cellcount_dist$frequency %>% sum
tol2$clone_bc %>% table
tol2$clone_bc %>% table %>% sum
tol2_cellcount_dist$frequency %>% sum
tol2_cellcount_dist$cell_count %>% sum
tol2_cellcount_dist
tol2$clone_bc %>% unique %>% length
tol2$clone_bc %>% unique %>% length
tol2$cell %>% unique %>% length
cell_tol2count_dist = tol2$cell_bc %>% table %>% table %>%
as.data.frame %>%
set_colnames(c("tol2_count", "frequency"))
cell_tol2count_dist
cell_tol2count_dist$frequency %>% sum
cell_tol2count_dist$frequency[[1]]
length(all_cell_barcodes)
# This bit of magic unfortunately doesn't work interactively.
my_wd = getSrcDirectory(function(x) {x})
my_wd
my_wd = "/Users/erickernfeld/Desktop/cluster_and_pipeline_work/single_cell_pipeline_before_dge/tcr_alignment/simple_recombinome"
# Load in FASTA with recombinome and separate sequences from headers
Mmus_TCR_all_2017JUL12_copy <- read_csv( file.path( my_wd, "Mmus_TCR_all_2017JUL12 copy.txt"),
col_names = FALSE )
library(dplyr)
# Load in FASTA with recombinome and separate sequences from headers
Mmus_TCR_all_2017JUL12_copy <- read_csv( file.path( my_wd, "Mmus_TCR_all_2017JUL12 copy.txt"),
col_names = FALSE )
library(plyr)
library(readr)
# Load in FASTA with recombinome and separate sequences from headers
Mmus_TCR_all_2017JUL12_copy <- read_csv( file.path( my_wd, "Mmus_TCR_all_2017JUL12 copy.txt"),
col_names = FALSE )
Mmus_TCR_all_2017JUL12_copy = Mmus_TCR_all_2017JUL12_copy$X1
genes = Mmus_TCR_all_2017JUL12_copy[seq(1, length(Mmus_TCR_all_2017JUL12_copy)-1, by = 2)]
seqs  = Mmus_TCR_all_2017JUL12_copy[seq(2, length(Mmus_TCR_all_2017JUL12_copy)  , by = 2)]
names(seqs) = NULL
seqs
names(seqs) = NULL
# Split headers into V and J alleles
splitgene = function(x) {
x = strsplit( x, split = "_T" )[[1]]
x[[2]] = paste0("T", x[[2]])
x = gsub(x, pattern = ">chr", replacement = "")
return(x)
}
splitgene(genes[[1]])
genes %<>% lapply(splitgene) %>% unlist()
# Split sequences into V and J alleles, removing constant pieces
constants = c(Trac = "ACATCCAGAACCCAGAACCTGCTGTGTACCAGTTAAAAGATCCTCGGTCTCAGGACAGCACCCTCTGCCTGTTCACCGACTTTGACTCCCAAATCAATGTGCCGAAAACCATGGAATCTGGAACGTTCATCACTGACAAAACTGTGCTGGACATGAAAGCTATGGATTCCAAGAGCAATGGGGCCATTGCCTGGAGCAACCAGACAAGCTTCACCTGCCAAGATATCTTCAAAGAGACCAACGCCACCTACCCCAGTTCAGACGTTCCCTGTGATGCCACGTTGACTGAGAAAAGCTTTGAAACAGATATGAACCTAAACTTTCAAAACCTGTCAGTTATGGGACTCCGAATCCTCCTGCTGAAAGTAGCCGGATTTAACCTGCTCATGACGCTGAGGCTGTGGTCCAGTTGA",
Trbc_shared = "AGGATCTGAGAAATGTGACTCCACCCAAGGTCTCCTTGTTTGAGCCATCAAAAGCAGAGATTGCAAACAAACAAAAGGCTACCCTCGTGTGCTTGGCCAGGGGCTTCTTCCCTGACCACGTGGAGCTGAGCTGGTGGGTGAATGGCAAGGAGGTCCACAGTGGGGTCAGCACGGACCCTCAGGCCTACAAGGAGAGCAATTATAGCTACTGCCTGAGCAGCCGCCTGAGGGTCTCTGCTACCTTCTGGCACAATCCTC",
Trgc_shared = "GACAAAAGGCTTGATGCAGACATTTCCCCCAAGCCCACTATTTTCCTTCCTTCTGTTGCTGAAACAAATCTCCATAAGACTGGGACATACCTTTGTCTCCTTGAAAAGTTCTTTCCCGATGTCATAAGGGTGTATTGGAAAGAAAAGG",
Trdc = "AAAGCCAGCCTCCGGCCAAACCATCTGTTTTCATCATGAAAAATGGAACAAATGTTGCTTGTCTGGTGAAAGATTTCTACCCTAAAGAGGTGACTATAAGTCTCAGATCATCCAAGAAGATTGTGGAATTCGACCCTGCTATAGTCATCTCCCCCAGCGGGAAGTACAGTGCTGTCAAGCTTGGTCAGTATGGAGATTCGAATTCAGTGACATGTTCAGTTCAGCACAACAGTGAAACTGTGCACTCGACTGACTTTGAACCATATGCAAATTCTTTCAATAATGAAAAACTACCAGAACCTGAAAATGACACACAAATTTCAGAGCCTTGCTATGGCCCAAGAGTCACAGTTCACACTGAGAAGGTAAACATGATGTCCCTCACGGTGCTGGGCCTACGACTGCTGTTTGCCAAGACCATTGCCATCAATTTTCTCTTGACTGTTAAGTTATTCTTTTA")
seqs = sapply( seqs, gsub, pattern = paste0(constants, collapse="|"), replacement = "")
splitseq = function(x){
strsplit( x, split = "N+" )[[1]][2:3]
}
seqs %<>% lapply(splitseq) %>% unlist()
# Pare down to unique sequences, ensuring the gene names match the sequences.
genes = c( genes, names( constants ) )
seqs  = c( seqs,         constants )
seqs[1]
seqs[2]
seqs[3]
seqs[1]
seqs[1] %>% length
seqs %>% sapply(length)
seqs %>% sapply(length) %>% c
seqs %>% sapply(length) %>% table
# Pare down to unique sequences, ensuring the gene names match the sequences.
genes = c( genes, names( constants ) )
seqs  = c( seqs,         constants )
length(seqs) == length(genes)
idx = !duplicated(seqs)
genes = genes[idx]
seqs  = seqs [idx]
names(seqs) = NULL
genes
seqs
