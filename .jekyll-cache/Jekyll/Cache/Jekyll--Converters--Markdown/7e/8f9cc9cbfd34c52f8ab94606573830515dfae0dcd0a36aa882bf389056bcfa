I"5<p><code class="language-plaintext highlighter-rouge">MatrixLazyEval</code> is an R package for “lazy evaluation” of matrices, which can help save time and memory by being smarter about common tasks like:</p>

<ul>
  <li>scaling rows/colums</li>
  <li>shifting rows/columns</li>
  <li>extracting residuals after linear regression</li>
  <li>multiplying matrices</li>
  <li>composing multiple such operations</li>
  <li>performing approximate PCA and SVD’s</li>
</ul>

<p>See <a href="https://github.com/ekernf01/MatrixLazyEval">https://github.com/ekernf01/MatrixLazyEval</a> to try it out.</p>

<h5 id="how-does-it-work">How does it work?</h5>

<p>Can you spot the difference between \((Xv) - \mathbf 1(m^Tv)\) and \((X - \mathbf 1 m^T)v\)? In certain realistic situations, the result is more or less the same, but the memory requirements can differ by gigabytes.</p>

<p>Suppose you have a 60,000 by 30,000 sparse matrix X. You want to center each column of X to form a new matrix Z. This can be written $Z =X - \mathbf 1 m^T$, where $m$ are the means and $\mathbf 1$ is a column vector of $1’s$. then compute Zv for some vector v. If you center the columns naively, almost none of the zeroes will be preserved. Your matrix will be dense, and it will occupy <strong>&gt;14GB of memory</strong> (1.8e9 doubles; 8 bytes per double). To avoid this, you can distribute $v$ to avoid ever storing $Z$: compute $(Xv) - \mathbf 1(m^Tv)$, where m is a row vector containing the column means of X. This consumes little memory beyond what is already used to store the data.</p>

<p>​</p>

:ET